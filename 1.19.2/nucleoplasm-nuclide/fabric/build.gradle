plugins {
    id "com.github.johnrengelman.shadow" version "$shadow_version"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":${archives_base_name}:common").loom.accessWidenerPath
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${fabric_api_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-fabric:${architectury_version}"

//    modApi "io.github.over-run:nucleoplasm-api-fabric:${mod_version}"

    common(project(path: ":${archives_base_name}:common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":${archives_base_name}:common", configuration: "transformProductionFabric")) { transitive false }
    common(project(path: ":${archives_base_name}:fabric-like", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":${archives_base_name}:fabric-like", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
    inputs.property "version", project.version
    inputs.property "org_name", org_name
    inputs.property "license", license
    inputs.property "mod_description", mod_description

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "org_name": org_name,
                "license": license,
                "mod_description": mod_description
    }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":${archives_base_name}:common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
